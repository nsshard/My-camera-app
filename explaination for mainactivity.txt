package com.example.cw2program;


import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.camera.core.CameraSelector;
import androidx.camera.core.ImageCapture;
import androidx.camera.core.ImageCaptureException;
import androidx.camera.core.Preview;
import androidx.camera.lifecycle.ProcessCameraProvider;
import androidx.camera.view.PreviewView;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.lifecycle.LifecycleOwner;

import android.Manifest;

import androidx.fragment.app.FragmentActivity;
import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.hardware.Camera;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.media.Image;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import com.google.common.util.concurrent.ListenableFuture;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;

// Bunch of import stuff necessary for the script to run

import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
import static android.Manifest.permission.ACCESS_FINE_LOCATION;

// Importing high accuracy and low accuracy location perms


public class MainActivity extends AppCompatActivity implements View.OnClickListener{
private ListenableFuture<ProcessCameraProvider> cameraProviderFuture;

// Uses AppCompatActivity and some camera stuff


PreviewView previewView;
    Button takepic;
// Button nicknamed as 'takepic'

    private ImageCapture imageCapture;

    private LocationManager locationManager;
    private LocationListener listener;

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
// Searching the "activity_main" aka the main activity xml
        Button btn_locate;
        TextView tv_latitude;
        TextView tv_longhitud;
// Defining location stuff
        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
        takepic = findViewById(R.id.capture);
// Our main button, using R.id to search for it
        takepic.setOnClickListener(this);
// What if you click a button?
        previewView = findViewById(R.id.previewView);
// Searching previewView 
        cameraProviderFuture = ProcessCameraProvider.getInstance(this);
        cameraProviderFuture.addListener(() -> {
            try {
                ProcessCameraProvider cameraProvider = cameraProviderFuture.get();
// Above sections deal with camera preview
                startCameraX(cameraProvider);
// Start camera
            } catch (ExecutionException e) {
                e.printStackTrace();
// prints info
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }, getExecutor());

        btn_locate = (Button)findViewById(R.id.btn_locate);
        tv_latitude = (TextView)findViewById(R.id.tv_latitude);
        tv_longhitud = (TextView)findViewById(R.id.tv_longhitud);
        ActivityCompat.requestPermissions(MainActivity.this, new String[]{
                Manifest.permission.ACCESS_FINE_LOCATION}, 123);
        btn_locate.setOnClickListener(new View.OnClickListener() {
// Locational stuff
            @Override

            public void onClick(View v) {
// On click of a button
                GPSLocator gpsLocator = new GPSLocator(getApplicationContext());
                Location location = gpsLocator.GetLocation();
// Get location (function is found on GPSLocator.Java)
                if(location != null){
                    double latitude = location.getLatitude();
                    double longhitud = location.getLongitude();
                    tv_latitude.setText(String.valueOf(latitude));
                    tv_longhitud.setText(String.valueOf(longhitud));
// Editing the text
                }
            }
        });
    }




    private Executor getExecutor() {
        return ContextCompat.getMainExecutor(this);
    }

    private void startCameraX(ProcessCameraProvider cameraProvider) {
        cameraProvider.unbindAll();
// End camera when the app ends
        CameraSelector cameraSelector = new CameraSelector.Builder()
                .requireLensFacing(CameraSelector.LENS_FACING_BACK)
                .build();
// Back camera

        Preview preview = new Preview.Builder().build();

        preview.setSurfaceProvider(previewView.getSurfaceProvider());

        imageCapture = new ImageCapture.Builder()
                .setCaptureMode(imageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
                .build();
        cameraProvider.bindToLifecycle((LifecycleOwner) this, cameraSelector, preview, imageCapture);
    }



    @Override
    public void onClick(View view) {
    switch (view.getId()){
        case R.id.capture:
            capturePhoto(); 
            break;
        }
    }


    private void capturePhoto() {

// Save pic function

        long timestamp =  System.currentTimeMillis();

              ContentValues contentValues = new ContentValues();
              contentValues.put(MediaStore.MediaColumns.DISPLAY_NAME, timestamp);
              contentValues.put(MediaStore.MediaColumns.MIME_TYPE, "image/jpeg");

// Saving pic to local

        imageCapture.takePicture(
                new ImageCapture.OutputFileOptions.Builder(getContentResolver(),
                        MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues
// Saving it on external storage
                ).build(),
                getExecutor(),
                new ImageCapture.OnImageSavedCallback() {
                    @Override
                    public void onImageSaved(@NonNull ImageCapture.OutputFileResults outputFileResults) {
                        Toast.makeText(MainActivity.this, "Photo saved", Toast.LENGTH_SHORT).show();
                    }

                    @Override
                    public void onError(@NonNull ImageCaptureException exception) {
                        Toast.makeText(MainActivity.this, "Error saving" + exception.getMessage(), Toast.LENGTH_SHORT).show();

// Message if error
                    }
                }
        );

    }

}
